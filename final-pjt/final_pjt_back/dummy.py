import json
import random
from faker import Faker

faker = Faker("ko_KR")

# NCS 대분류 직군
ncs_jobs = [
    "경영·사무", "금융·보험", "교육", "자연·사회과학", "법률·경찰·소방·교도·국방", "보건·의료",
    "사회복지·종교", "문화·예술·디자인·방송", "운전·운송", "영업·판매", "경비·청소", "미용·숙박·여행·오락·스포츠",
    "음식서비스", "건설", "기계", "재료", "화학", "섬유·의복", "전기·전자", "정보통신", 
    "식품가공", "인쇄·목재·가구·공예", "환경·에너지·안전", "농림어업"
]

# 연령대 분포 설정
age_distribution = {
    (20, 24): 8,
    (25, 29): 17,
    (30, 34): 20,
    (35, 39): 20,
    (40, 44): 15,
    (45, 49): 10,
    (50, 54): 5,
    (55, 59): 3,
    (60, 65): 2
}

# 연령대별 자산 및 연봉 분포 설정
age_income_asset_distribution = {
    (20, 24): {
        "assets": [
            (0.001, (50_000_000, 100_000_000)),  # 상위 0.1%
            (0.009, (30_000_000, 50_000_000)),   # 상위 1%
            (0.09, (10_000_000, 30_000_000)),    # 상위 10%
            (0.8, (1_000_000, 10_000_000)),      # 중위
            (0.1, (0, 1_000_000))               # 하위 10%
        ],
        "salary": [
            (0.001, (35_000_000, 40_000_000)),
            (0.009, (32_010_000, 35_000_000)),
            (0.09, (27_290_000, 32_010_000)),
            (0.8, (24_640_000, 27_290_000)),
            (0.1, (20_000_000, 24_640_000))
        ],
    },
    (25, 29): {
        "assets": [
            (0.001, (100_000_000, 150_000_000)),
            (0.009, (50_000_000, 100_000_000)),
            (0.09, (20_000_000, 50_000_000)),
            (0.8, (5_000_000, 20_000_000)),
            (0.1, (0, 5_000_000))
        ],
        "salary": [
            (0.001, (50_000_000, 60_000_000)),
            (0.009, (41_430_000, 50_000_000)),
            (0.09, (32_650_000, 41_430_000)),
            (0.8, (27_390_000, 32_650_000)),
            (0.1, (20_000_000, 27_390_000))
        ]
    },
    (30, 34): {
        "assets": [
            (0.001, (200_000_000, 300_000_000)),
            (0.009, (100_000_000, 200_000_000)),
            (0.09, (50_000_000, 100_000_000)),
            (0.8, (20_000_000, 50_000_000)),
            (0.1, (10_000_000, 20_000_000))
        ],
        "salary": [
            (0.001, (60_000_000, 70_000_000)),
            (0.009, (52_170_000, 60_000_000)),
            (0.09, (39_160_000, 52_170_000)),
            (0.8, (30_630_000, 39_160_000)),
            (0.1, (25_000_000, 30_630_000))
        ]
    },
    (35, 39): {
        "assets": [
            (0.001, (600_000_000, 800_000_000)),
            (0.009, (500_000_000, 600_000_000)),
            (0.09, (300_000_000, 500_000_000)),
            (0.8, (200_000_000, 300_000_000)),
            (0.1, (100_000_000, 200_000_000))
        ],
        "salary": [
            (0.001, (70_000_000, 80_000_000)),
            (0.009, (62_670_000, 70_000_000)),
            (0.09, (45_540_000, 62_670_000)),
            (0.8, (33_330_000, 45_540_000)),
            (0.1, (30_000_000, 33_330_000))
        ]
    },
    (40, 44): {
        "assets": [
            (0.001, (800_000_000, 1_000_000_000)),
            (0.009, (600_000_000, 800_000_000)),
            (0.09, (500_000_000, 600_000_000)),
            (0.8, (300_000_000, 500_000_000)),
            (0.1, (200_000_000, 300_000_000))
        ],
        "salary": [
            (0.001, (75_000_000, 80_000_000)),
            (0.009, (70_150_000, 75_000_000)),
            (0.09, (48_870_000, 70_150_000)),
            (0.8, (33_490_000, 48_870_000)),
            (0.1, (30_000_000, 33_490_000))
        ]
    },
    (45, 49): {
        "assets": [
            (0.001, (1_000_000_000, 2_000_000_000)),
            (0.009, (800_000_000, 1_000_000_000)),
            (0.09, (600_000_000, 800_000_000)),
            (0.8, (400_000_000, 600_000_000)),
            (0.1, (300_000_000, 400_000_000))
        ],
        "salary": [
            (0.001, (80_000_000, 90_000_000)),
            (0.009, (75_460_000, 80_000_000)),
            (0.09, (48_500_000, 75_460_000)),
            (0.8, (35_000_000, 48_500_000)),
            (0.1, (31_090_000, 35_000_000))
    ],
    },
    (50, 54): {
        "assets": [
            (0.001, (2_000_000_000, 3_000_000_000)),
            (0.009, (1_500_000_000, 2_000_000_000)),
            (0.09, (1_000_000_000, 1_500_000_000)),
            (0.8, (700_000_000, 1_000_000_000)),
            (0.1, (500_000_000, 700_000_000))
        ],
        "salary": [
            (0.001, (85_000_000, 95_000_000)),
            (0.009, (78_810_000, 85_000_000)),
            (0.09, (45_490_000, 78_810_000)),
            (0.8, (29_190_000, 45_490_000)),
            (0.1, (27_000_000, 29_190_000))
    ],
    },
    (55, 59): {
        "assets": [
            (0.001, (5_000_000_000, 15_000_000_000)),  # 상위 0.1%
            (0.009, (3_000_000_000, 5_000_000_000)),   # 상위 1%
            (0.09, (1_500_000_000, 3_000_000_000)),    # 상위 10%
            (0.8, (700_000_000, 1_500_000_000)),       # 중위
            (0.1, (300_000_000, 700_000_000))          # 하위 10%
        ],
        "salary": [
            (0.001, (80_000_000, 90_000_000)),
            (0.009, (71_640_000, 80_000_000)),
            (0.09, (40_400_000, 71_640_000)),
            (0.8, (27_640_000, 40_400_000)),
            (0.1, (25_000_000, 27_640_000))
        ]
    },
    (60, 65): {
        "assets": [
            (0.001, (10_000_000_000, 20_000_000_000)),  # 상위 0.1%
            (0.009, (5_000_000_000, 10_000_000_000)),   # 상위 1%
            (0.09, (2_000_000_000, 5_000_000_000)),     # 상위 10%
            (0.8, (1_000_000_000, 2_000_000_000)),      # 중위
            (0.1, (500_000_000, 1_000_000_000))         # 하위 10%
        ],
        "salary": [
            (0.001, (50_000_000, 55_000_000)),
            (0.009, (46_350_000, 50_000_000)),
            (0.09, (30_750_000, 46_350_000)),
            (0.8, (24_830_000, 30_750_000)),
            (0.1, (20_000_000, 24_830_000))
        ]
    },
    (65, 70): {
        "assets": [
            (0.001, (5_000_000_000, 10_000_000_000)),
            (0.009, (3_000_000_000, 5_000_000_000)),
            (0.09, (2_000_000_000, 3_000_000_000)),
            (0.8, (1_000_000_000, 2_000_000_000)),
            (0.1, (500_000_000, 1_000_000_000))
        ],
        "salary": [
            (0.001, (30_000_000, 35_000_000)),  # 연금 기반
            (0.009, (25_000_000, 30_000_000)),
            (0.09, (20_000_000, 25_000_000)),
            (0.8, (15_000_000, 20_000_000)),
            (0.1, (10_000_000, 15_000_000))
        ]
    }
}

# 연령대 랜덤 생성 함수
def get_random_age():
    selected_group = random.choices(
        list(age_distribution.keys()),
        weights=age_distribution.values(),
        k=1
    )[0]
    return random.randint(*selected_group)

# 연령대별 랜덤 값 생성 함수
def get_random_value(age, category):
    for age_range, data in age_income_asset_distribution.items():
        if age_range[0] <= age <= age_range[1]:
            dist = data.get(category)
            if dist:
                selected_range = random.choices(
                    [d[1] for d in dist],
                    weights=[d[0] for d in dist],
                    k=1
                )[0]
                return random.randint(*selected_range)
    return ValueError('에러 발생')

job_age_mapping = {
    "경영·사무": range(25, 65),
    "금융·보험": range(25, 55),
    "교육": range(25, 65),
    "자연·사회과학": range(25, 60),
    "법률·경찰·소방·교도·국방": range(25, 55),
    "보건·의료": range(23, 60),
    "사회복지·종교": range(25, 65),
    "문화·예술·디자인·방송": range(20, 50),
    "운전·운송": range(30, 60),
    "영업·판매": range(22, 50),
    "경비·청소": range(40, 65),
    "미용·숙박·여행·오락·스포츠": range(20, 45),
    "음식서비스": range(20, 50),
    "건설": range(30, 59),
    "기계": range(20, 50),
    "재료": range(25, 55),
    "화학": range(25, 55),
    "섬유·의복": range(20, 50),
    "전기·전자": range(22, 55),
    "정보통신": range(20, 39),
    "식품가공": range(20, 50),
    "인쇄·목재·가구·공예": range(20, 55),
    "환경·에너지·안전": range(25, 55),
    "농림어업": range(50, 66),
}

# 매핑되지 않은 직군은 랜덤으로 설정
for job in ncs_jobs:
    if job not in job_age_mapping:
        job_age_mapping[job] = range(20, 65)  # 기본 연령대를 20~65로 설정

# 직군 랜덤 할당 함수
def get_random_job(age):
    filtered_jobs = [job for job, age_range in job_age_mapping.items() if age in age_range]
    if not filtered_jobs:
        return random.choice(ncs_jobs)
    return random.choice(filtered_jobs)

# 사용자 데이터 생성 함수
def generate_user_data(pk):
    age = random.randint(20, 65)
    assets = get_random_value(age, "assets")
    salary = get_random_value(age, "salary")
    job = get_random_job(age)
    is_active = random.choices([0, 1], weights=[0.05, 0.95], k=1)[0]
    return {
        "model": "accounts.user",
        "pk": pk,
        "fields": {
            "username": faker.unique.user_name(),
            "password": faker.password(),
            "email": faker.unique.email(),
            "date_joined": faker.date_between(start_date='-1y', end_date='today').isoformat(),
            "nickname": f"user_{pk}",
            "age": age,
            "gender": random.choice(['남', '여']),
            "assets": assets,
            "salary": salary,
            "job": job,
            "is_active": is_active
        }
    }

# 데이터 생성
user_data = [generate_user_data(pk) for pk in range(1, 20001)]

# JSON 저장
with open("users.json", "w", encoding="utf-8") as file:
    json.dump(user_data, file, ensure_ascii=False, indent=4)

print("JSON 파일 생성 완료!")
